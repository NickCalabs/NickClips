version: '3'

services:
  web:
    build: .
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Database configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/videoshare}
      - PGUSER=${PGUSER:-postgres}
      - PGPASSWORD=${PGPASSWORD:-postgres}
      - PGHOST=${PGHOST:-db}
      - PGPORT=${PGPORT:-5432}
      - PGDATABASE=${PGDATABASE:-videoshare}
      
      # Security
      - SESSION_SECRET=${SESSION_SECRET}
      
      # Storage
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-/app/uploads}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-1073741824}
      
      # App configuration
      - FLASK_APP=${FLASK_APP:-main.py}
      - FLASK_ENV=${FLASK_ENV:-production}
      - SERVER_NAME=${SERVER_NAME:-localhost:5000}
      
      # Video Processing
      - MAX_VIDEOS_PER_USER=${MAX_VIDEOS_PER_USER:-50}
      - CONCURRENT_PROCESSING=${CONCURRENT_PROCESSING:-1}
      
      # yt-dlp configuration
      - YT_DLP_PROXY=${YT_DLP_PROXY:-}
      - YT_DLP_RATE_LIMIT=${YT_DLP_RATE_LIMIT:-500K}
      - YT_DLP_MAX_DURATION=${YT_DLP_MAX_DURATION:-3600}
      
      # Add yt-dlp to PATH
      - PATH=/app/bin:/usr/local/bin:/usr/bin:/bin
      
      # For Nginx/proxy configuration (optional)
      - VIRTUAL_HOST=${VIRTUAL_HOST:-}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST:-}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-}
    volumes:
      - ${LOCAL_UPLOAD_PATH:-./uploads}:${UPLOAD_FOLDER:-/app/uploads}
      # Mount the installation script
      - ./docker-install-ytdlp.sh:/app/docker-install-ytdlp.sh
      
      # If using Dockge/stacks, uncomment ONE of these options:
      # Option 1: Mount host yt-dlp binary directly
      #- /opt/stacks/nickclips/bin/yt-dlp:/app/bin/yt-dlp
      
      # Option 2: Create a bind mount for the bin directory
      #- ytdlp_data:/app/bin

    # Run an entrypoint script that installs yt-dlp before starting the application
    entrypoint: >
      /bin/bash -c "
        # Make sure bin directory exists
        mkdir -p /app/bin
        
        # Log distribution type for debugging
        echo 'OS Detection:'
        if [ -f /etc/alpine-release ]; then
          echo ' - Detected Alpine Linux'
          echo ' - Alpine version:' $(cat /etc/alpine-release)
        elif [ -f /etc/debian_version ]; then
          echo ' - Detected Debian-based system'
          echo ' - Debian version:' $(cat /etc/debian_version)
        else
          echo ' - Unknown distribution'
          echo ' - Checking common OS files:'
          for f in /etc/os-release /etc/redhat-release /etc/system-release; do
            if [ -f $f ]; then
              echo ' - Found' $f ':'
              cat $f
            fi
          done
        fi
        
        # Handle yt-dlp installation using multiple fallback methods
        echo '======== Starting yt-dlp installation ========'
        
        # METHOD 1: Check if it's already installed
        for ytdlp_path in /app/bin/yt-dlp /usr/local/bin/yt-dlp /usr/bin/yt-dlp $(which yt-dlp 2>/dev/null); do
          if [ -x "$ytdlp_path" ]; then
            echo "yt-dlp already exists at $ytdlp_path, skipping installation"
            YT_DLP_INSTALLED=true
            break
          fi
        done
        
        # METHOD 2: Use shell script installer if needed
        if [ -z "$YT_DLP_INSTALLED" ] && [ -f /app/docker-install-ytdlp.sh ]; then
          echo 'Using shell script installer...'
          chmod +x /app/docker-install-ytdlp.sh
          /app/docker-install-ytdlp.sh && YT_DLP_INSTALLED=true || echo 'Shell script installation failed'
        fi
        
        # METHOD 3: Try using Python installer (no external dependencies)
        if [ -z "$YT_DLP_INSTALLED" ] && [ -f /app/emergency_install_ytdlp.py ]; then
          echo 'Using Python emergency installer...'
          python /app/emergency_install_ytdlp.py && YT_DLP_INSTALLED=true || echo 'Python installer failed'
        fi
        
        # METHOD 4: Last resort - direct Python download
        if [ -z "$YT_DLP_INSTALLED" ]; then
          echo 'Using inline Python download...'
          python3 -c "
import os, urllib.request, ssl
print('Direct Python download of yt-dlp')
os.makedirs('/app/bin', exist_ok=True)
ytdlp_path = '/app/bin/yt-dlp'
ssl_context = ssl._create_unverified_context()
urllib.request.urlretrieve('https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp', ytdlp_path, context=ssl_context)
os.chmod(ytdlp_path, 0o755)
print('Downloaded yt-dlp to', ytdlp_path)
" && YT_DLP_INSTALLED=true || echo 'Direct Python download failed'
        fi
        
        # Final verification
        for ytdlp_path in /app/bin/yt-dlp /usr/local/bin/yt-dlp /usr/bin/yt-dlp $(which yt-dlp 2>/dev/null); do
          if [ -x "$ytdlp_path" ]; then
            echo "VERIFICATION: Found yt-dlp at $ytdlp_path"
            echo 'VERSION:'
            $ytdlp_path --version || echo 'Version check failed'
            YT_DLP_VERIFIED=true
            break
          fi
        done
        
        if [ -z "$YT_DLP_VERIFIED" ]; then
          echo 'WARNING: yt-dlp installation could not be verified, the application may not work correctly'
          # Create a dummy executable as last resort to prevent immediate crashes
          cat > /app/bin/yt-dlp << 'EOF'
#!/bin/sh
echo "ERROR: This is a dummy yt-dlp. The real binary could not be installed."
echo "The downloader functionality will not work correctly."
exit 1
EOF
          chmod +x /app/bin/yt-dlp
        fi
        
        # Print environment for debugging
        echo 'Environment information:'
        echo 'Current PATH:' $PATH
        echo 'Python version:' $(python --version)
        echo 'Python executable:' $(which python)
        
        # Continue with normal startup
        echo '======== Starting application ========'
        python migrations.py && 
        gunicorn --bind 0.0.0.0:5000 --workers 4 main:app
      "
    depends_on:
      - db
    restart: unless-stopped
    # For Cloudflare Tunnel integration  
    networks:
      - videoshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.videoshare.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.videoshare.entrypoints=websecure"
      - "traefik.http.routers.videoshare.tls=true"

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${PGPASSWORD:-postgres}
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_DB=${PGDATABASE:-videoshare}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - videoshare-network

networks:
  videoshare-network:
    driver: bridge

volumes:
  postgres_data: {}
  ytdlp_data: {}
  # This volume persists yt-dlp binaries and scripts if needed