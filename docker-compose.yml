version: '3'

services:
  web:
    build: .
    ports:
      - "${PORT:-5000}:5000"
    environment:
      # Database configuration
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/videoshare}
      - PGUSER=${PGUSER:-postgres}
      - PGPASSWORD=${PGPASSWORD:-postgres}
      - PGHOST=${PGHOST:-db}
      - PGPORT=${PGPORT:-5432}
      - PGDATABASE=${PGDATABASE:-videoshare}
      
      # Security
      - SESSION_SECRET=${SESSION_SECRET}
      
      # Storage
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-/app/uploads}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-1073741824}
      
      # App configuration
      - FLASK_APP=${FLASK_APP:-main.py}
      - FLASK_ENV=${FLASK_ENV:-production}
      - SERVER_NAME=${SERVER_NAME:-localhost:5000}
      
      # Video Processing
      - MAX_VIDEOS_PER_USER=${MAX_VIDEOS_PER_USER:-50}
      - CONCURRENT_PROCESSING=${CONCURRENT_PROCESSING:-1}
      
      # yt-dlp configuration
      - YT_DLP_PROXY=${YT_DLP_PROXY:-}
      - YT_DLP_RATE_LIMIT=${YT_DLP_RATE_LIMIT:-500K}
      - YT_DLP_MAX_DURATION=${YT_DLP_MAX_DURATION:-3600}
      
      # Add yt-dlp to PATH
      - PATH=/app/bin:/usr/local/bin:/usr/bin:/bin
      
      # For Nginx/proxy configuration (optional)
      - VIRTUAL_HOST=${VIRTUAL_HOST:-}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST:-}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-}
    volumes:
      - ${LOCAL_UPLOAD_PATH:-./uploads}:${UPLOAD_FOLDER:-/app/uploads}
      # Mount the installation script
      - ./docker-install-ytdlp.sh:/app/docker-install-ytdlp.sh
      
      # If using Dockge/stacks, uncomment ONE of these options:
      # Option 1: Mount host yt-dlp binary directly
      #- /opt/stacks/nickclips/bin/yt-dlp:/app/bin/yt-dlp
      
      # Option 2: Create a bind mount for the bin directory
      #- ytdlp_data:/app/bin

    # Run an entrypoint script that installs yt-dlp before starting the application
    entrypoint: >
      /bin/bash -c "
        # Make sure bin directory exists
        mkdir -p /app/bin
        
        # Install curl and other essential utilities if they're missing
        if ! command -v curl &> /dev/null || ! command -v wget &> /dev/null; then
          echo 'Installing essential utilities...'
          apt-get update && apt-get install -y curl wget ca-certificates
        fi
        
        # Install yt-dlp if it doesn't exist - try multiple methods
        if [ ! -x /app/bin/yt-dlp ] && [ ! -x /usr/local/bin/yt-dlp ] && [ ! -x /usr/bin/yt-dlp ]; then
          echo 'Installing yt-dlp...'
          
          # Method 1: Use our installation script
          if [ -f /app/docker-install-ytdlp.sh ]; then
            chmod +x /app/docker-install-ytdlp.sh
            /app/docker-install-ytdlp.sh || echo 'Installation script failed, trying direct download...'
          fi
          
          # Method 2: Direct download if script failed
          if [ ! -x /app/bin/yt-dlp ]; then
            echo 'Downloading yt-dlp directly...'
            curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /app/bin/yt-dlp || \
            wget https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -O /app/bin/yt-dlp
            chmod a+rx /app/bin/yt-dlp
            
            # Create symlinks
            ln -sf /app/bin/yt-dlp /usr/local/bin/yt-dlp 2>/dev/null || true
            ln -sf /app/bin/yt-dlp /usr/bin/yt-dlp 2>/dev/null || true
          fi
          
          # Check if installation was successful
          if [ -x /app/bin/yt-dlp ]; then
            echo 'yt-dlp installed successfully at /app/bin/yt-dlp'
            /app/bin/yt-dlp --version || echo 'Warning: yt-dlp installed but version check failed'
          else
            echo 'WARNING: yt-dlp installation failed, application may not work correctly'
          fi
        else
          echo 'yt-dlp is already installed'
        fi
        
        # Print current PATH for debugging
        echo 'Current PATH:'
        echo $PATH
        
        # Continue with normal startup
        python migrations.py && 
        gunicorn --bind 0.0.0.0:5000 --workers 4 main:app
      "
    depends_on:
      - db
    restart: unless-stopped
    # For Cloudflare Tunnel integration  
    networks:
      - videoshare-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.videoshare.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.videoshare.entrypoints=websecure"
      - "traefik.http.routers.videoshare.tls=true"

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${PGPASSWORD:-postgres}
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_DB=${PGDATABASE:-videoshare}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - videoshare-network

networks:
  videoshare-network:
    driver: bridge

volumes:
  postgres_data:
  ytdlp_data:
    # Use this for yt-dlp installations that you want to persist
    # If you uncomment the ytdlp_data volume mount above